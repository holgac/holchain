#!/usr/bin/env bash
set -o nounset -o errexit -o pipefail

function usage() {
  echo "$0 [OPTIONS]"
  echo "  Deploys rc files and sets up stuff"
  echo "Parameters:"
}

while getopts "f" OPT; do
  case "$OPT" in
    f) echo placeholder;;
  esac
done

if [ $(uname) = 'Darwin' ]; then
  # TODO: test in linux
  DIR=$(dirname $(realpath "$0"))
else
  DIR=$(dirname "$(readlink -f "$0")")
fi
FROMTO="$(dirname "$DIR")/bin/fromto"
# shellcheck source=/dev/null
source "$DIR/common"
FORCEREINSTALL=${FORCEREINSTALL:-}
sudo -k

add_line_to() {
  DST_FILE="$1"
  LINE_TO_ADD="$2"
  COMMENT_CHAR="$3"
  FULL_LINE="$LINE_TO_ADD $COMMENT_CHAR  Added by holchain"
  if grep --no-messages --quiet "$FULL_LINE" "$DST_FILE"; then
    echo "  Already exists in $(basename "$DST_FILE")"
  else
    echo "$FULL_LINE" >> "$DST_FILE"
    echo "  Appended config to $(basename "$DST_FILE")"
  fi
}

add_to() {
  DST_FILE="$1"
  FILE_TO_ADD="$2"
  COMMENT_CHAR="$3"
  BEGIN_LINE="$COMMENT_CHAR  Begin holchain block"
  END_LINE="$COMMENT_CHAR  End holchain block"
  if [ ! -e "$DST_FILE" ]; then
    echo "  $DST_FILE does not exist, skipping"
    return
  fi
  grep --no-messages --quiet "$BEGIN_LINE" "$DST_FILE"
  LINES_NOT_FOUND=$?
  TMPFILE=$(mktemp)
  # shellcheck source=/dev/null
  {
    . "$FROMTO" -vft "$BEGIN_LINE" "$END_LINE" < "$DST_FILE"
    echo "$BEGIN_LINE"
    cat "$FILE_TO_ADD"
    echo "$END_LINE"
  } >> "$TMPFILE"
  cp "$DST_FILE" "$FILE_TO_ADD.backup" || exit 1
  mv "$TMPFILE" "$DST_FILE"
  if [ $LINES_NOT_FOUND -eq 0 ]; then
    echo "  Updated config in $DST_FILE"
  else
    echo "  Added config to $DST_FILE"
  fi
}

function write_to() {
  local dest="$1"
  local content="$2"
  local acting_user="$3"
  if [ -f "$dest" ]; then
    if cmp --silent "$dest" <(echo "$content"); then
      echo "  $dest is up to date"
      return
    fi
    local tmp=$(mktemp)
    cp "$dest" "$tmp"
    echo "  $dest backup: $tmp"
  fi
  echo "$content" |
    sudo -u "$acting_user" tee "$dest" > /dev/null
  echo "  Updated $dest"
}

vim_plugin() {
  GIT_URL="$1"
  BUNDLE_PATH="$HOME/.vim/bundle"
  mkdir -p "$BUNDLE_PATH"
  PACKAGE_NAME=$(echo "$GIT_URL" | sed -E 's:^.*/(.+)\.git:\1:')
  TARGET_PATH="$BUNDLE_PATH/$PACKAGE_NAME"
  if [ -d "$TARGET_PATH" ]; then
    echo "  vim plugin $PACKAGE_NAME already exists"
    return 1
  elif [ ! -e "$TARGET_PATH" ]; then
    echo "  getting vim plugin $PACKAGE_NAME"
    git clone "$GIT_URL" "$TARGET_PATH"
    return 0
  else
    echo "  vim plugin $PACKAGE_NAME cannot be downloaded"
    return 1
  fi
}

function copy_with_backup() {
  local dest="$1"
  local src="$2"
  if cmp --silent "$dest" "$src"; then
    echo "  Not changed: $(basename "$src")"
    return
  fi
  cp "$dest" "$dest.bak"
  cp "$src" "$dest"
}

echo 'adding rc files'
# TODO: had to do this to ~/.bash_profile on mac, check bash version
add_line_to "$BASHRC" "source $DIR/bashrc" "#"
add_line_to "$PROFILE" "source $DIR/profile" "#"
add_line_to "$VIMRC" "source $DIR/vimrc" '"'
add_line_to "$VIMRC" "source $DIR/vimrcpython" '"'
copy_with_backup "$I3CONFIG" "$DIR/i3config"
add_to "$TMUXCONFIG" "$DIR/tmuxconf" "#"

#if [ $(uname) != 'Darwin' ]; then
#  echo 'updating system config'
#  write_to '/etc/ld.so.conf.d/locallib.conf' '/usr/local/lib' 'root'
#fi

echo 'creating directories'
mkdir -p "$HOME/screenshots"
mkdir -p "$HOLCONFIGDIR"

brew_install () {
  local cur=$(brew list -1)
  local args=($*)
  for p in ${args[@]}; do
    if echo "$cur" | grep --no-messages --quiet "$p"; then
      echo "  $p already installed"
      continue
    fi
    brew install "$p" --with-default-names
    echo "  $p installed"
  done
}

if [ $(uname) = 'Darwin' ]; then
  brew_install gcc coreutils binutils diffutils ed findutils gawk gnu-indent \
    gnu-sed gnu-tar gnu-which gnutls grep gzip watch wdiff wget bash gdb \
    gpatch less m4 make file-formula git openssh perl python
  add_line_to "$GDBCONFIG" 'set startup-with-shell off' '#'
  if [ ! -e /usr/local/bin/gcc ]; then
    sudo ln -s /usr/local/bin/gcc-8 /usr/local/bin/gcc
  fi
fi
clone_and_compile () {
  local git_url="$1"
  local configure_params="$2"
  local name=$(echo "$git_url" | sed -E 's:^.*/(.+)\.git:\1:')
  if [ -d $HOME/develop/$name ]; then
    # TODO: add a force option to easily retry in case compilation fails
    echo "  $name already exists"
    return
  fi
  mkdir -p $HOME/develop
  cd $HOME/develop
  git clone $git_url
  cd $name
  echo "  $name downloaded"
  if [ -f configure ]; then
    ./configure $configure_params
  fi
  make -j 8
  sudo make install
}

echo 'Compiling software'
clone_and_compile https://github.com/vim/vim.git '--enable-luainterp \
  --enable-python3interp --enable-perlinterp --enable-rubyinterp \
  --enable-tclinterp --enable-cscope --disable-sysmouse  --with-features=huge \
  --enable-multibyte --disable-gui --enable-fail-if-missing'

function dnf_install () {
  local tmp="$(mktemp)"
  local args=($*)
  dnf list --installed --quiet ${args[@]} > "$tmp"
  local count="$(awk '{ if( $3 && !$4) {print $1;}}' < "$tmp" | wc -l)"
  rm "$tmp"
  if [ "$count" -eq ${#args[@]} ]; then
    echo "  All packages already installed"
    return
  fi
  sudo dnf install ${args[@]}
}

if [ $(uname) = 'Linux' ]; then
  echo 'xorg setup'
  xorg_touchpad='Section "InputClass"
        Identifier "touchpad"
        MatchIsTouchpad "on"
        Driver "libinput"
        Option "Tapping" "on"
        Option "NaturalScrolling" "on"
        Option "ScrollMethod" "twofinger"
        Option "TappingButtonMap" "lrm"
  EndSection'
  xorg_keyboard='Section "InputClass"
        Identifier "system-keyboard"
        MatchIsKeyboard "on"
        Option "XkbLayout" "us"
  EndSection'
  xorg_path=/etc/X11/xorg.conf.d
  # to avoid unnecessary sudo
  if [ ! -d "$xorg_path" ]; then
    sudo mkdir -p "$xorg_path"
  fi
  write_to "$xorg_path/90-touchpad.conf" "$xorg_touchpad" root
  write_to "$xorg_path/90-keyboard.conf" "$xorg_keyboard" root

  echo 'Installing software'
  # assuming fedora
  dnf_install i3 i3status dmenu i3lock xbacklight feh conky \
    NetworkManager network-manager-applet light scrot irssi \
    xdotool xsel
fi

function download_to () {
  local target="$1"
  local url="$2"
  local path=$(dirname "$target")
  local name=$(basename "$target")
  if [ -e "$target" ] && [ -z "$FORCEREINSTALL" ]; then
    echo "  $name exists, skipping"
  else
    mkdir -p "$path"
    curl -LSso "$target" "$url"
    echo "  $name downloaded"
  fi
}

echo 'downloading vim plugins'
download_to "$HOME/.vim/autoload/pathogen.vim" 'https://tpo.pe/pathogen.vim'
vim_plugin 'https://github.com/wikitopian/hardmode.git' || true
vim_plugin 'https://github.com/scrooloose/nerdtree.git' || true
vim_plugin 'https://github.com/theevocater/thrift.vim.git' || true
if vim_plugin 'https://github.com/wincent/command-t.git'; then
  (cd $HOME/.vim/bundle/command-t/ruby/command-t/ext/command-t; ruby extconf.rb;  make; )
fi

# irssi stuff
echo 'downloading irssi plugins'
mkdir -p ~/.irssi/scripts
download_to $HOME/.irssi/scripts/nickcolor.pl https://raw.githubusercontent.com/vigith/random/master/irssi/nickcolor.pl
