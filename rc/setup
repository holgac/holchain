#!/usr/bin/env bash
set -o nounset -o errexit -o pipefail

function usage() {
  echo "$0 [OPTIONS]"
  echo "  Deploys rc files and sets up stuff"
  echo "Parameters:"
  echo "  -s: Server mode (do not install window manager etc.)"
  echo "  -d: Directory to clone repos into (defaults to ~/develop)"
  echo "  -r: Dry run - Just print operations"
  echo "  -h: Display this help and exit"
}

server_mode=
clone_dir="$HOME/develop"
dry_run=
while getopts "sd:rh" OPT; do
  case "$OPT" in
    s) server_mode=1;;
    d) clone_dir="$OPTARG";;
    r) dry_run=1;;
    h) usage && exit 0;;
    *) usage && exit 1;;
  esac
done

if [ "$(uname)" = 'Darwin' ]; then
  # TODO: test in linux
  DIR="$(dirname "$(realpath "$0")")"
else
  DIR=$(dirname "$(readlink -f "$0")")
fi
# shellcheck source=/dev/null
source "$DIR/common"
sudo -k

function include_in() {
  local dest="$1"
  local content="$2"
  local comment_char="$3"
  content="$content $comment_char  Added by holchain"
  if grep --no-messages --quiet "$content" "$dest"; then
    echo "  Already exists in $(basename "$dest")"
  elif [ -z "$dry_run" ]; then
    echo "$content" >> "$dest"
    echo "  Appended config to $(basename "$dest")"
  else
    echo "  Would modify $(basename "$dest")"
  fi
}

function write_to() {
  local dest="$1"
  local content="$2"
  local acting_user="$3"
  if [ -f "$dest" ]; then
    if cmp --silent "$dest" <(echo "$content"); then
      echo "  $dest is up to date"
      return
    elif [ -n "$dry_run" ]; then
      echo "  Would overwrite $dest"
      return
    fi
    local tmp
    tmp=$(mktemp)
    cp "$dest" "$tmp"
    echo "  $dest backup: $tmp"
  elif [ -n "$dry_run" ]; then
    echo "  Would create $dest"
    return
  fi
  echo "$content" |
    sudo -u "$acting_user" tee "$dest" > /dev/null
  echo "  Updated $dest"
}

vim_plugin() {
  local git_url="$1"
  local bundle_path="$HOME/.vim/bundle"
  mkdir -p "$bundle_path"
  local package_name
  package_name=$(echo "$git_url" | sed -E 's:^.*/(.+)\.git:\1:')
  local target_path="$bundle_path/$package_name"
  if [ -d "$target_path" ]; then
    echo "  vim plugin $package_name already exists"
    return 1
  elif [ -n "$dry_run" ]; then
    echo "  Would download vim plugin $package_name"
    return 1
  elif [ ! -e "$target_path" ]; then
    echo "  getting vim plugin $package_name"
    git clone "$git_url" "$target_path"
    return 0
  else
    echo "  vim plugin $package_name cannot be downloaded"
    return 1
  fi
}

function copy_with_backup() {
  local dest="$1"
  local src="$2"
  if cmp --silent "$dest" "$src"; then
    echo "  Not changed: $(basename "$src")"
    return
  elif [ -n "$dry_run" ]; then
    echo "  Would overwrite $dest"
    return
  fi
  if [ -e "$dest" ]; then
    cp "$dest" "$dest.bak"
  fi
  cp "$src" "$dest"
  printf "  Updated $dest\n"
}

echo 'Adding rc files'
# TODO: had to do this to ~/.bash_profile on mac, check bash version
include_in "$BASHRC" "source $DIR/bashrc" "#"
include_in "$PROFILE" "source $DIR/profile" "#"
include_in "$VIMRC" "source $DIR/vimrc" '"'
include_in "$VIMRC" "source $DIR/vimrcpython" '"'
copy_with_backup "$I3CONFIG" "$DIR/i3config"
copy_with_backup "$TMUXCONFIG" "$DIR/tmuxconf" "#"

#if [ $(uname) != 'Darwin' ]; then
#  echo 'updating system config'
#  write_to '/etc/ld.so.conf.d/locallib.conf' '/usr/local/lib' 'root'
#fi

echo 'creating directories'
if [ -z "$dry_run" ]; then
  mkdir -p "$HOME/screenshots"
  mkdir -p "$HOLCONFIGDIR"
else
  echo " Would create $HOME/screenshots"
  echo " Would create $HOLCONFIGDIR"
fi

brew_install () {
  local cur
  local args=("$@")
  cur=$(brew list -1)
  for p in "${args[@]}"; do
    if echo "$cur" | grep --no-messages --quiet "$p"; then
      echo "  $p already installed"
      continue
    fi
    if [ -z "$dry_run" ]; then
      brew install "$p" --with-default-names
      echo "  $p installed"
    else
      echo "  Would brew-install $p"
    fi
  done
}

if [ "$(uname)" = 'Darwin' ]; then
  brew_install gcc coreutils binutils diffutils ed findutils gawk gnu-indent \
    gnu-sed gnu-tar gnu-which gnutls grep gzip watch wdiff wget bash gdb \
    gpatch less m4 make file-formula git openssh perl python
  include_in "$GDBCONFIG" 'set startup-with-shell off' '#'
  if [ ! -e /usr/local/bin/gcc ]; then
    if [ -z "$dry_run" ]; then
      sudo ln -s /usr/local/bin/gcc-8 /usr/local/bin/gcc
    else
      echo "  would create symlink /usr/local/bin/gcc"
    fi
  fi
fi
clone_and_compile () {
  local git_url="$1"
  shift
  local configure_params=("$@")
  local name
  name=$(echo "$git_url" | sed -E 's:^.*/(.+)\.git:\1:')
  local target_dir="$clone_dir/$name"
  if [ -d "$target_dir" ]; then
    # TODO: add a force option to easily retry in case compilation fails
    echo "  $name already exists"
    return
  elif [ -n "$dry_run" ]; then
    echo "  Would clone and compile $name"
    return
  fi
  mkdir -p "$target_dir"
  git clone "$git_url" "$target_dir"
  echo "  $name downloaded"
  cd "$target_dir"
  if [ -f configure ]; then
    ./configure "${configure_params[@]}"
  fi
  make -j 8
  #sudo make install
}

echo 'Compiling software'
clone_and_compile https://github.com/vim/vim.git --enable-luainterp \
  --enable-python3interp --enable-perlinterp --enable-rubyinterp \
  --enable-tclinterp --enable-cscope --disable-sysmouse  --with-features=huge \
  --enable-multibyte --disable-gui --enable-fail-if-missing

function dnf_install () {
  local args=("$@")
  local count
  local tmp
  tmp="$(mktemp)"
  dnf list --installed --quiet "${args[@]}" > "$tmp"
  count="$(awk '{ if( $3 && !$4) {print $1;}}' < "$tmp" | wc -l)"
  rm "$tmp"
  if [ "$count" -eq ${#args[@]} ]; then
    echo "  All packages already installed"
    return
  elif [ -n "$dry_run" ]; then
    echo "  Would dnf-install ${args[*]}"
    return
  fi
  sudo dnf install "${args[@]}"
}

if [ "$(uname)" = 'Linux' ] && [ -z "$server_mode" ]; then
  echo 'xorg setup'
  xorg_touchpad='Section "InputClass"
        Identifier "touchpad"
        MatchIsTouchpad "on"
        Driver "libinput"
        Option "Tapping" "on"
        Option "NaturalScrolling" "on"
        Option "ScrollMethod" "twofinger"
        Option "TappingButtonMap" "lrm"
  EndSection'
  xorg_keyboard='Section "InputClass"
        Identifier "system-keyboard"
        MatchIsKeyboard "on"
        Option "XkbLayout" "us"
  EndSection'
  xorg_path=/etc/X11/xorg.conf.d
  # to avoid unnecessary sudo
  if [ ! -d "$xorg_path" ]; then
    sudo mkdir -p "$xorg_path"
  fi
  write_to "$xorg_path/90-touchpad.conf" "$xorg_touchpad" root
  write_to "$xorg_path/90-keyboard.conf" "$xorg_keyboard" root

  echo 'Installing software'
  # assuming fedora
  dnf_install i3 i3status dmenu i3lock xbacklight feh conky \
    NetworkManager network-manager-applet light scrot irssi \
    xdotool xsel ShellCheck tmux blueman
fi

function download_to () {
  local target="$1"
  local url="$2"
  local path
  local name
  path=$(dirname "$target")
  name=$(basename "$target")
  if [ -e "$target" ]; then
    echo "  $name exists, skipping"
  elif [ -n "$dry_run" ]; then
    echo "  Would download $name to $target"
  else
    mkdir -p "$path"
    curl -LSso "$target" "$url"
    echo "  $name downloaded"
  fi
}

echo 'downloading vim plugins'
download_to "$HOME/.vim/autoload/pathogen.vim" 'https://tpo.pe/pathogen.vim'
vim_plugin 'https://github.com/wikitopian/hardmode.git' || true
vim_plugin 'https://github.com/scrooloose/nerdtree.git' || true
vim_plugin 'https://github.com/theevocater/thrift.vim.git' || true
if vim_plugin 'https://github.com/wincent/command-t.git'; then
  (cd "$HOME/.vim/bundle/command-t/ruby/command-t/ext/command-t"; ruby extconf.rb;  make; )
fi

# irssi stuff
echo 'downloading irssi plugins'

download_to "$HOME/.irssi/scripts/nickcolor.pl" https://raw.githubusercontent.com/vigith/random/master/irssi/nickcolor.pl
