python3 << endpython
import vim

class vim_py:
  keymaps = None

  @staticmethod
  def feed_keys(keys):
    vim.command(f'call feedkeys("{keys}")')

  @staticmethod
  def unset_keymaps():
    if vim_py.keymaps:
      for (cmd, key, fn) in vim_py.keymaps:
        vim.command(f'{cmd} <buffer> {key} :python3 {fn}<CR>')
      vim_py.keymaps = None

  @staticmethod
  def set_keymaps(cmd_key_fn_tuples):
    vim_py.keymaps = cmd_key_fn_tuples
    for (cmd, key, fn) in cmd_key_fn_tuples:
      vim.command(f'{cmd} <buffer> {key} :python3 {fn}<CR>')

  def add_keymap(key, fn, add_leader=True, buffer_only=False):
    vim.command(
      f'nnoremap {"<buffer>" if buffer_only else ""} '\
      f'{"<leader>" if add_leader else ""}{key} :python3 {fn}<CR>',
    )

  def add_keymap_n(key, fn, prefn=None, add_leader=True, buffer_only=False):
    for i in range(1, 10):
      cmds = []
      if prefn:
        cmds.append(prefn)
      for j in range(0, i):
        cmds.append(fn)
      toeval = '(' + ','.join(cmds) + ')'
      vim_py.add_keymap(f'{i}{key}', toeval, add_leader, buffer_only)

  @staticmethod
  def set_autocmds(event_fn_pairs):
    vim.command('augroup rundata')
    vim.command('autocmd! rundata')
    for (event, fn) in event_fn_pairs:
        vim.command(f'autocmd rundata {event} * silent! python3 {fn}')
    vim.command('augroup END')

  @staticmethod
  def open_file(path, cx = None, cy = None):
    vim.command('edit ' + path)
    if cx is not None and cy is not None:
      vim.command('call cursor(' + str(cx) + ', ' + str(cy) + ')')

  @staticmethod
  def wordpos_under_cursor():
    buf = vim.current.buffer
    cur = vim.current.window.cursor
    line = vim.current.buffer[cur[0] - 1]
    # check if whitespace
    if len(line) is 0:
      return
    cchar = line[cur[1]]
    if cchar == ' ' or cchar == '\t':
      vim.current.buffer.append('wtf', cur[0])
      # TODO: throw
      return
    left = line[:cur[1]]
    right = line[cur[1]:]
    regex = '^([\w/\.\-]*).*$'
    leftw = re.match(regex, left[::-1]).groups()[0]
    rightw = re.match(regex, right).groups()[0]
    return (cur[0] - 1, len(left) - len(leftw), len(left) + len(rightw))

  @staticmethod
  def path_under_cursor():
    buf = vim.current.buffer
    data = vim_py.wordpos_under_cursor()
    if data is None:
      return
    (linenum, start, end) = data
    line = buf[linenum]
    path = line[start:end]
    regex = '^:(\d+)(:(\d+))?'
    right = line[end:]
    (line, col) = (0, 0)
    res = re.match(regex, right)
    if res:
      line = int(res.groups()[0])
      if len(res.groups()) == 3 and res.groups()[2] is not None:
        col = int(res.groups()[2])
    return (path, line, col)

  @staticmethod
  def open_in_new_tab():
    buf = vim.current.buffer.number
    cursor = vim.current.window.cursor
    vim.command(f'tabnew {vim.current.buffer.name}')
    vim.command(f'call cursor({cursor[0]}, {cursor[1]})')


class BufferSwitcher:
  #kbmap = '1234567890-=!@#$%^&*()_+qwertyuiop[]asdfghjkl;\'zxcvbnm,.QWERTYUIOP{}ASDFGHJKL:"ZXCVBNM<>/'
  # TODO: trim and save to viminfo?
  curlist = []
  curidx = -1
  reglist = {}
  prevbufno = None

  @staticmethod
  def push():
    BufferSwitcher.pop()
    BufferSwitcher.curidx = len(BufferSwitcher.curlist)
    BufferSwitcher.curlist.append({
      'bufno': vim.current.buffer.number,
      'line': vim.current.window.cursor[0],
      'col': vim.current.window.cursor[1],
    })

  @staticmethod
  def gotoprev():
    prevbufno = BufferSwitcher.prevbufno
    BufferSwitcher.prevbufno = vim.current.buffer.number
    vim.command(f'buffer {prevbufno}')

  # like mark+uppercasereg, but does not change cursor
  @staticmethod
  def register():
    reg = vim.eval('getchar()')
    BufferSwitcher.reglist[reg] = vim.current.buffer.number

  @staticmethod
  def gotoregister():
    BufferSwitcher.prevbufno = vim.current.buffer.number
    reg = vim.eval('getchar()')
    if reg in BufferSwitcher.reglist:
      elem = BufferSwitcher.reglist[reg]
      vim.command(f'buffer {elem}')

  @staticmethod
  def printregisters():
    for (reg,bufno) in BufferSwitcher.reglist.items():
      ch = chr(int(reg))
      print(f'{ch}: {vim.buffers[bufno].name}')

  @staticmethod
  def inc(inc=1, goto=True):
    if len(BufferSwitcher.curlist) < 1:
      return
    BufferSwitcher.prevbufno = vim.current.buffer.number
    BufferSwitcher.curidx = (inc + len(BufferSwitcher.curlist) + BufferSwitcher.curidx) % len(BufferSwitcher.curlist)
    if goto:
      elem = BufferSwitcher.curlist[BufferSwitcher.curidx]
      vim.command(f'buffer {elem["bufno"]}')

  @staticmethod
  def pop():
    BufferSwitcher.curlist = list(filter(
      lambda x: x['bufno'] != vim.current.buffer.number,
      BufferSwitcher.curlist,
    ))
    BufferSwitcher.inc(0, False)

  @staticmethod
  def purge():
    BufferSwitcher.curlist = []

class CodeReview:
  bufno = None
  @staticmethod
  def start():
    CodeReview.bufno = vim.current.buffer.number
    vim_py.open_file(*vim_py.path_under_cursor())
    vim.command(f'nnoremap <C-g><C-p> :python3 CodeReview.keep()<CR>')
    vim.command(f'nnoremap <C-g><C-o> :python3 CodeReview.discard()<CR>')
    vim.command(f'nnoremap <C-g><C-i> :python3 CodeReview.again()<CR>')

  @staticmethod
  def again():
    vim.command(f'buffer {CodeReview.bufno}')
    vim_py.open_file(*vim_py.path_under_cursor())


  @staticmethod
  def keep():
    vim.command(f'buffer {CodeReview.bufno}')
    ln = vim.current.window.cursor[0] + 1
    vim.command(f'call cursor({ln}, 1)')
    vim_py.open_file(*vim_py.path_under_cursor())

  @staticmethod
  def discard():
    vim.command(f'buffer {CodeReview.bufno}')
    ln = vim.current.window.cursor[0]
    del vim.current.buffer[ln-1]
    if len(vim.current.buffer):
      vim.command(f'call cursor({ln}, 1)')
      vim_py.open_file(*vim_py.path_under_cursor())

  @staticmethod
  def append(cmd):
    vim.command(f'buffer {CodeReview.bufno}')
    vim.command(f'0read !{cmd}')
    vim.command(f'call cursor(1, 1)')

  # TODO: only appends now
  @staticmethod
  def prompt():
    vim.command('call inputsave()')
    try:
      cmd = vim.eval('input("$ ")')
    except KeyboardInterrupt:
      return
    vim.command('call inputrestore()')
    if len(cmd.strip(' ')) == 0:
      return
    CodeReview.append(cmd)

endpython
