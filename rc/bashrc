#!/usr/bin/env bash
#TODO: add setup script for installing stuff like pygmentize and jq

if [ "$_" = "${BASH_SOURCE[0]}" ]; then
  echo "You should source this file..."
  exit 1
fi
RC_DIR=$(dirname "${BASH_SOURCE[0]}")
REPO_DIR=$(dirname "$RC_DIR")
# shellcheck source=/dev/null
source "$RC_DIR/common"
export PATH="$PATH:$REPO_DIR/bin"
export HOLCONFIGDIR="$HOME/.holchain"

# Configuration for builtins {{{
shopt -s checkwinsize

holgac_ps_fn () {
  # shellcheck disable=SC2181
  if [ $? -eq 0 ]; then
    ST=' :)'
  else
    ST=' :('
  fi
  DATE=$(date '+%I:%M ' | tr -d '\n')
  DIR=$(dirs | tr -d '\n')
  OUT="$DATE$DIR$ST"
  # ps_helper can be a user defined function that formats the path
  if type ps_helper 2>/dev/null 1>/dev/null; then
    OUT=$(ps_helper "$OUT")
  fi
  echo -en "$OUT"
}
export PS1="\$(holgac_ps_fn)"
export HISTCONTROL='ignoreboth'
# }}}

# Exports {{{
export EDITOR=vim
export VISUAL=vim
# }}}

# Aliases {{{

# aliases for coreutils
if [ $(uname) = 'Darwin' ]; then
  alias ls='ls -G'
else
  alias ls='ls --color=auto'
fi
alias ll='ls -lathor'
alias mv='mv -i'
alias sbp='source ~/.bashrc'
alias rgrep='grep -r'
alias grep='grep --color=auto'
alias less='less -R'
alias curl='curl -LSs'

#bash meta stuff
# like `clear`, but cleaner if you scroll up
alias cln='for i in $(seq $(tput lines)); do printf "\n"; done'

# aliases to shorten commands
alias ffs='pygmentize -g'
alias hpd='hphpd -h localhost'
alias GEET='GET http://localhost/status.php'
alias cdd='cd "${DATAFOLDER-$(realpath ~)/develop}"'
alias holbinlog='mysqlbinlog -vv --base64-output=decode-rows'
# cheat sheet for i3
alias i3cheat='grep -Ev -e "^ *#" -e "^ *$" < "$I3CONFIG" | sed -re "s/^  +/  /g" -e "s/^( *)bindsym /\1/g" -e "s/ exec (--no-startup-id)/ =>/g"'
# }}}

# displays only basic info
npminfo () {
  npm info "$1" | tr "'" '"' | sed -r 's/(\w+): /"\1":/g'\
    | jq '{name,description,license,version}'
}

# get current timestamp, or pretty print given timestamp
ts () {
  if [ -z "$1" ]; then
    date '+%s'
  else
    date -d "@$1"
  fi
}

# validate a json file or object
jqv () {
  INP="$*"
  if [ -f "$INP" ]; then
    INP=$(cat "$INP")
  elif [ -z "$INP" ]; then
    INP=$(cat /dev/stdin)
  fi
  echo "$INP" | jq . >/dev/null
}

# groups by given json lines and prints counts
groupby () {
  jq "$1" | sort | uniq -c
}

# chainable rgrep
ff () {
  if [ -t 0 ]; then
    find . -type f | ff "$1" "$2"
  elif [ -t 1 ] || [ "$2" = "stdout" ]; then
    while read r; do
      cat -n "$r" | grep "$1" | tr '\t' ' ' \
        | sed -En 's: *([0-9]+) *(!?[^ ]):'"$r"'\:\1  \2:gp' \
        | grep "$1"
    done
    exit 0
  else
    while read r; do if grep -q "$1" "$r"; then echo "$r"; fi; done
  fi
}

lefs () {
  pygmentize "$1" | less -R
}
