#!/usr/bin/env bash
#TODO: add setup script for installing stuff like pygmentize and jq

if [ "$_" = "${BASH_SOURCE[0]}" ]; then
  echo "You should source this file..."
  exit 1
fi
RC_DIR=$(dirname "${BASH_SOURCE[0]}")
REPO_DIR=$(dirname "$RC_DIR")
# shellcheck source=/dev/null
source "$RC_DIR/common"
add_to_path () {
  local out
  if out=$(echo "$1:$PATH" | tr : \\n | grep -Ev '^$' | awk '!m[$0]++' | tr \\n :); then
    echo "${out%:}"
  else
    echo "$PATH"
  fi
}

PATH=$(add_to_path '/usr/local/bin')
if [ "$(uname)" = 'Darwin' ]; then
  PATH=$(add_to_path '/usr/local/opt/coreutils/libexec/gnubin')
fi
PATH=$(add_to_path "$REPO_DIR/bin")
export PATH


#export PATH=$(echo $PATH | tr ':' '\n' | grep -v "$1" | tr '\n' ':' |\
#  sed -E 's/$(.*):$/'"$REPO_DIR/bin:/usr/local/bin:$PATH"'\1/')
export HOLCONFIGDIR="$HOME/.holchain"


# Configuration for builtins {{{
shopt -s checkwinsize

holgac_ps_fn () {
  # shellcheck disable=SC2181
  local exitcode="$?"
  local curdate
  curdate=$(date '+%I:%M' | tr -d '\n')
  local cwd
  cwd=$(dirs | tr -d '\n')
  # ps_helper can be a user defined function that formats the path
  if type ps_helper 2>/dev/null 1>/dev/null; then
    cwd=$(ps_helper "$cwd")
  fi
  printf '\[%s\]' "$(tput bold)"
  printf '\[%s\]%s ' "$(tput setaf 6)" "$curdate"
  printf '\[%s\]%s ' "$(tput setaf 5)" "$cwd"
  if [ "$exitcode" -eq 0 ]; then
    printf '\[%s\]:)' "$(tput setaf 2)"
  else
    printf '\[%s\]-%s:(' "$(tput setaf 1)" "$exitcode"
  fi
  printf '\[%s\]' "$(tput sgr 0)"
}

set_bash_prompt () {
  PS1="$(holgac_ps_fn)"
}
export PROMPT_COMMAND=set_bash_prompt
export HISTCONTROL='ignoreboth'
# }}}

# Exports {{{
export EDITOR=vim
export VISUAL=vim
# }}}

# Aliases {{{

# aliases for coreutils
if [ "$(uname)" = 'Darwin' ]; then
  alias ls='ls -G'
else
  alias ls='ls --color=auto'
fi
alias ll='ls -lathor'
alias mv='mv -i'
alias sbp='source ~/.bashrc'
alias rgrep='grep -r'
alias grep='grep --color=auto'
alias less='less -R'
alias curl='curl -LSs'

#bash meta stuff
# like `clear`, but cleaner if you scroll up
alias cln='for i in $(seq $(tput lines)); do printf "\n"; done'

# aliases to shorten commands
alias ffs='pygmentize -g'
alias hpd='hphpd -h localhost'
alias GEET='GET http://localhost/status.php'
alias cdd='cd "${DATAFOLDER-$(realpath ~)/develop}"'
alias holbinlog='mysqlbinlog -vv --base64-output=decode-rows'
# cheat sheet for i3
alias i3cheat='grep -Ev -e "^ *#" -e "^ *$" < "$I3CONFIG" | sed -re "s/^  +/  /g" -e "s/^( *)bindsym /\1/g" -e "s/ exec (--no-startup-id)/ =>/g"'
# }}}

# displays only basic info
npminfo () {
  npm info "$1" | tr "'" '"' | sed -r 's/(\w+): /"\1":/g'\
    | jq '{name,description,license,version}'
}

# get current timestamp, or pretty print given timestamp
ts () {
  if [ -z "$1" ]; then
    date '+%s'
  else
    date -d "@$1"
  fi
}

# validate a json file or object
jqv () {
  INP="$*"
  if [ -f "$INP" ]; then
    INP=$(cat "$INP")
  elif [ -z "$INP" ]; then
    INP=$(cat /dev/stdin)
  fi
  echo "$INP" | jq . >/dev/null
}

# groups by given json lines and prints counts
groupby () {
  jq "$1" | sort | uniq -c
}

# chainable rgrep
ff () {
  ARG2=${2:-}
  if [ -t 0 ]; then
    find . -type f | ff "$1" "$ARG2"
  elif [ -t 1 ] || [ "$2" = "stdout" ]; then
    local ret_code=1
    while read -r r; do
      if cat -n "$r" | grep "$ARG2" | tr '\t' ' ' \
        | sed -En 's:[ \t]*([0-9]+)[ \t]*:'"$r"'\:\1 ==>  :p' \
        | grep "$1"; then
        ret_code=0
      fi
    done
    exit "$ret_code"
  else
    while read -r r; do if grep --quiet "$1" "$r"; then echo "$r"; fi; done
  fi
}

lefs () {
  pygmentize "$1" | less -R
}

ip2a () {
  nslookup "$1" | sed -nE 's/^.*name = (.*)\.$/\1/gp'
}

tee2tmp () {
  local tmp
  tmp=$(mktemp)
  trap '(>&2 tput setaf 1; printf %s\n $tmp; tput sgr0; exit 1; )' SIGINT SIGTERM
  (>&2 tput setaf 1; printf '%s\n' "$tmp"; tput sgr0; )
  tee "$tmp"
  (>&2 tput setaf 1; printf '%s\n' "$tmp"; tput sgr0; )
  if [ -n "$1" ]; then
    eval "$1 $tmp"
  fi
}
