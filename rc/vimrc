let g:leader='g'
let mapleader = g:leader

" general config {{{
syntax on
set tabstop=2 expandtab autoindent shiftwidth=2 hlsearch backspace=2
set ruler smartcase ignorecase
set viminfo+='1000,f1,:1000
set foldmethod=marker
set relativenumber number incsearch
set shell=/bin/bash\ --login
set shellcmdflag=-ic
set hidden
nnoremap <leader>sn :noh<CR>
" dont use registers on x key
noremap x "_x
noremap X "_X
" filename
nnoremap <leader>sfn :let @" = expand("%:t")<CR>
" absolute path
nnoremap <leader>sfp :let @" = expand("%:p")<CR>
" get dir (path minus filename)
nnoremap <leader>sfd :let @" = expand("%:h")<CR>
" Open the same file in a new tab
nmap <leader>sot :let @h = expand("%:p")<CR>ge:e <C-r>h<CR>
" reload vimrc
nnoremap <leader>sso :so ~/.vimrc<CR>
" jk to escape
inoremap jk <esc>
inoremap <esc> <esc>:call HardModeEcho(g:HardMode_hardmodeMsg)<CR>a
" }}}

" colours {{{
hi Comment ctermfg=Cyan
" }}}

" plugin config {{{
execute pathogen#infect()
let g:HardMode_level = 'wannabe' 
tnoremap jk <Esc>
function! OnOptionSet()
  if &paste ==# "1"
    tunmap jk
    tunmap <C-w>j
  else
    tnoremap jk <C-w>N
    " to prevent hanging
    tnoremap <C-w>j <C-w>j
  endif
endfunction
call OnOptionSet()
augroup vimrc
  autocmd!
  autocmd VimEnter,BufNewFile,BufReadPost * silent! call HardMode()
  autocmd OptionSet * silent! call OnOptionSet()
augroup END
let NERDTreeIgnore=['\.d$[[file]]', '\.o$[[file]]', '\.out$[[file]]']
nnoremap <C-n> :NERDTreeToggle<CR>
nmap <silent> <Leader>w <Plug>(CommandT)
" }}}

" tab/buffer operations {{{
python3 << endpython
# nnoremap <leader>e :tabedit<CR>
vim_py.add_keymap('e', "vim.command('tabedit')")
vim_py.add_keymap_n('t', "vim.command('tabnext')")
vim_py.add_keymap_n('T', "vim.command('tabprevious')")
vim_py.add_keymap_n('q', "vim.command('quit')")
vim_py.add_keymap_n('y', "vim.command('tabnext')", "vim.command('tabrewind')")
vim_py.add_keymap('m', 'BufferSwitcher.push()')
vim_py.add_keymap('n', 'BufferSwitcher.inc()')
vim_py.add_keymap('N', 'BufferSwitcher.inc(-1)')
vim_py.add_keymap('p', 'BufferSwitcher.pop()')
vim_py.add_keymap('P', 'BufferSwitcher.purge()')
vim_py.add_keymap('M', 'BufferSwitcher.register()')
vim_py.add_keymap('\'', 'BufferSwitcher.gotoregister()')
vim_py.add_keymap('?r', 'BufferSwitcher.printregisters()')
vim_py.add_keymap('k', 'vim_py.open_file(*vim_py.path_under_cursor())')
vim_py.add_keymap('ssr', 'CodeReview.start()')
endpython
" }}}

" pluginish operations {{{
python3 << endpython
import vim
import re
class PathFinder:
  @staticmethod
  def path_in_ff():
    buf = vim.current.buffer
    cur = vim.current.window.cursor
    line = vim.current.buffer[cur[0] - 1]
    first = line.split(' ')[0]
    elems = first.split(':')
    return (elems[0], elems[1], 1)

class RunData:
  def __init__(self):
    self.match_id = None
    self.winid = None
    self.path_fetcher = vim_py.path_under_cursor
    self.wordpos_under_cursor = vim_py.wordpos_under_cursor
    self.target_winid = vim.eval('win_getid()')
    self.target_bufnr = vim.eval('winbufnr(0)')

  def prompt(self):
    vim.command('call inputsave()')
    try:
      cmd = vim.eval('input("$ ")')
    except KeyboardInterrupt:
      return
    vim.command('call inputrestore()')
    if len(cmd.strip(' ')) == 0:
      return
    self.run(cmd)

  def on_run(self):
    args = ' '.join(str(i) for i in vim.eval('a:000'))
    self.run(args)

  def run(self, runcmd):
    height = '15'
    vim.command('botright ' + height + 'new')
    vim.command('setlocal buftype=nofile bufhidden=hide noswapfile')
    vim.command('read !' + runcmd)
    vim.command('setlocal readonly nomodifiable')
    vim.command('call cursor(1,1)')
    vim_py.set_autocmds([
      ('BufLeave', 'run_data.on_quit()'),
      ('CursorMoved', 'run_data.on_cursor_moved()'),
    ])
    vim_py.set_keymaps([
      ('nnoremap', 'q', 'run_data.on_quit()'),
      ('nnoremap', ':', 'run_data.on_quit() and vim_py.feed_keys(":")'),
      ('nnoremap', '<CR>', 'run_data.on_select()'),
      ('nnoremap', 'p', 'run_data.on_preview()'),
    ])
    vim.command('highlight RunHover ctermfg=red cterm=underline,bold,italic')
    self.winid = vim.eval('win_getid()')
    self.on_cursor_moved()

  def on_quit(self):
    vim.command(f'bdelete')
    vim.command(f'call win_gotoid({self.target_winid})')
    self.cleanup()
    return True

  def on_cursor_moved(self):
    if self.match_id is not None:
      vim.command(f'call matchdelete({self.match_id})')
      self.match_id = None
    data = self.wordpos_under_cursor()
    if data is None:
      return
    (linenum, start, end) = data
    self.match_id = vim.eval(
      "matchaddpos('RunHover', [[{},{},{}]])".format(linenum + 1, start + 1, end - start),
    )

  def on_preview(self):
    data = self.path_fetcher()
    if data is None:
      return
    (path, cx, cy) = data
    vim_py.set_autocmds([])
    self.open_file(path, cx, cy)
    self.focus_to_win()

  def open_file(self, path, cx = None, cy = None):
    vim.command('call win_gotoid(' + self.target_winid + ')')
    vim_py.open_file(path, cx, cy)

  def focus_to_win(self):
    vim.command(f'call win_gotoid({self.winid})')
    vim_py.set_autocmds([
      ('BufLeave', 'run_data.on_quit()'),
      ('CursorMoved', 'run_data.on_cursor_moved()'),
    ])
    return True

  def on_select(self, set_cursor = True):
    data = self.path_fetcher()
    if data is None:
      return
    (path, cx, cy) = data
    # close current window
    vim.command(f'bdelete')
    if set_cursor:
      self.open_file(path, cx, cy)
    else:
      self.open_file(path)
    self.cleanup()

  def cleanup(self):
    vim.command('augroup rundata')
    vim.command('autocmd! rundata')
    vim.command('augroup END')
    vim.command('highlight clear RunHover')

endpython

function! Run(...)
python3 << endpython
run_data = RunData()
run_data.on_run()
endpython
endfunction

function! RunPrompt()
python3 << endpython
# TODO: move to a namespaceish thing
run_data = RunData()
run_data.prompt()
endpython
endfunction

nnoremap <silent> <Leader>r :call RunPrompt()<CR>

command! -nargs=+ Run call Run("<args>")
" TODO: use vim_py.add_keymap
" TODO: help screen with categories like 'hg commands' or 'buffer commands'?
"       ^ can easily be integrated to vim_py
nnoremap <leader>srl :call Run("hg resolve --list")<CR>
nnoremap <leader>str :call Run("hg st --rev .^")<CR>
nnoremap <leader>stw :call Run("hg st")<CR>
" TODO: mark all and mark this file options
nnoremap <leader>srm :call system("hg resolve --mark")<CR>

" }}}
